# AxonCache Bazel Build Configuration
# 
# This file defines the build targets for AxonCache, a high-performance caching library.
# The build is structured to provide:
# - Core C++ library with minimal dependencies
# - Command-line interface (CLI) binary
# - Comprehensive test suite with automated test discovery
# - Multi-platform support (macOS, Linux)
#
# Architecture:
# - xxhash_bundled: Isolated C library for hashing (avoids C++ flag conflicts)
# - axoncache: Main C++ library with all core functionality
# - axoncache_cli: Command-line interface for cache operations
# - Automated test targets: Generated from test source files
#
# External Dependencies:
# - cxxopts: Command-line argument parsing
# - spdlog: High-performance logging
# - doctest: Lightweight testing framework
# - abseil-cpp: Google's C++ common libraries

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_binary", "cc_test")
load("//bazel:test_utils.bzl", "generate_test_suite")

# xxhash Hashing Library
# 
# Bundled xxhash implementation compiled as pure C to avoid C++ compiler flag conflicts.
# Uses AXONCACHE_ namespace prefix to prevent symbol collisions with other xxhash users.
# This is a critical performance component for cache key hashing operations.
cc_library(
    name = "xxhash_bundled",
    srcs = ["src/axoncache/common/xxhash.c"],
    hdrs = [
        "include/axoncache/common/xxhash.h",
        "include/axoncache/common/xxh3.h",
    ],
    includes = ["include"],
    copts = [
        "-DXXH_NAMESPACE=AXONCACHE_",
    ],
    visibility = ["//visibility:private"],
)

# AxonCache Core Library
#
# The main AxonCache library providing high-performance caching functionality.
# Features:
# - Zero-copy cache operations where possible
# - Multi-threaded safe access patterns
# - Configurable cache backends (memory-mapped files, malloc-based)
# - Support for various data types and serialization formats
# - Cross-platform compatibility (macOS, Linux)
#
# Build Configuration:
# - C++20 standard for modern language features
# - Platform-specific optimizations and linking
# - Strict aliasing disabled for performance-critical code paths
# - Comprehensive warning coverage for code quality
cc_library(
    name = "axoncache",
    srcs = glob([
        "src/**/*.cpp",
        # Exclude xxhash.c - handled by separate target above
    ], exclude = ["src/axoncache/common/xxhash.c"]),
    hdrs = glob([
        "include/**/*.h",
        "src/**/*.h",  # Internal headers
    ]),
    includes = [
        "include",
        "src",
    ],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
            "-DXXH_NAMESPACE=AXONCACHE_",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing", 
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
            "-DXXH_NAMESPACE=AXONCACHE_",
        ],
        "//conditions:default": ["-std=c++20"],
    }),
    linkopts = select({
        "@platforms//os:macos": [
            "-framework CoreFoundation",
        ],
        "@platforms//os:linux": [
            "-lpthread",
            "-ldl", 
        ],
        "//conditions:default": [],
    }),
    deps = [
        ":xxhash_bundled",  # Only dependency is bundled xxhash
    ],
    visibility = ["//visibility:public"],
)

# AxonCache Command-Line Interface
#
# Interactive CLI tool for cache operations and debugging.
# Provides command-line access to all AxonCache functionality including:
# - Cache creation and manipulation
# - Data import/export operations
# - Performance benchmarking utilities
# - Cache inspection and debugging tools
#
# Dependencies:
# - cxxopts: Modern C++ command-line argument parsing
# - spdlog: Structured logging with multiple output formats
# - abseil-cpp: Efficient hash map implementations
#
# This target maintains compatibility with the CMake axoncache_cli target.
cc_binary(
    name = "axoncache_cli",
    srcs = glob([
        "main/src/*.cpp",
        "main/src/*.h",
    ]),
    includes = ["main/src"],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing", 
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
        ],
        "//conditions:default": ["-std=c++20"],
    }),
    deps = [
        ":axoncache",
        "@cxxopts//:cxxopts",
        "@spdlog//:spdlog",
        "@abseil-cpp//absl/container:flat_hash_map",
    ],
)

# ===== TEST TARGETS =====
#
# Comprehensive test suite for AxonCache functionality.
# Tests are organized into two categories:
# 1. Main test binary: Integration tests and core functionality
# 2. Auto-generated test targets: Unit tests discovered from source files
#
# Test Framework: doctest (lightweight, header-only C++ testing framework)
# Test Data: Located in test/data/ directory, accessible via Bazel data attribute
# Coverage: All public APIs, edge cases, and performance characteristics

# Main Integration Test Binary
#
# Primary test executable containing integration tests and core functionality validation.
# Includes test utilities and resource loading capabilities for data-driven tests.
# This target maintains compatibility with the CMake axoncacheTest target.
cc_test(
    name = "axoncacheTest",
    srcs = [
        "test/src/main.cpp",
        "test/src/ResourceLoader.cpp",
        "test/src/ResourceLoader.h",
        "test/src/CacheTestUtils.h",
    ],
    includes = ["test/src", "test"],
    deps = [
        ":axoncache",
        "@doctest//doctest:doctest",
        "@spdlog//:spdlog",
    ],
    data = [
        "test/data/example_fast_data.dta",
        "test/data/bench_cache.1758220992251.cache",
    ],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
            "-DBAZEL_BUILD",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
            "-DBAZEL_BUILD",
        ],
        "//conditions:default": ["-std=c++20", "-DBAZEL_BUILD"],
    }),
)

# Automated Unit Test Discovery
#
# Automatically generates individual test targets for each test source file.
# This approach provides:
# - Parallel test execution for faster CI builds
# - Granular test failure reporting
# - Individual test debugging capabilities
# - Automatic discovery of new test files
#
# Configuration:
# - Scans test/src directory for test source files
# - Excludes main.cpp (handled by axoncacheTest target above)
# - Each test file becomes an independent cc_test target
# - All tests are grouped under the "all_tests" test_suite
generate_test_suite(
    name = "all_tests",
    test_dirs = ["test/src"],
    exclude_files = ["test/src/main.cpp"],
)

# Convenience Test Alias
#
# Provides a simple way to run all tests with a memorable target name.
# Usage: bazel test //:test_all
alias(
    name = "test_all",
    actual = ":all_tests",
    visibility = ["//visibility:public"],
)