# AxonCache Bazel Build

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_binary", "cc_test")
load("//bazel:test_utils.bzl", "generate_test_suite")

# Bundled xxhash C library (separate target to avoid C++ flags)
cc_library(
    name = "xxhash_bundled",
    srcs = ["src/axoncache/common/xxhash.c"],
    hdrs = [
        "include/axoncache/common/xxhash.h",
        "include/axoncache/common/xxh3.h",
    ],
    includes = ["include"],
    copts = [
        "-DXXH_NAMESPACE=AXONCACHE_",
    ],
    visibility = ["//visibility:private"],
)

# Main axoncache library - no external dependencies
cc_library(
    name = "axoncache",
    srcs = glob([
        "src/**/*.cpp",
        # Exclude xxhash.c - handled by separate target above
    ], exclude = ["src/axoncache/common/xxhash.c"]),
    hdrs = glob([
        "include/**/*.h",
        "src/**/*.h",  # Internal headers
    ]),
    includes = [
        "include",
        "src",
    ],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
            "-DXXH_NAMESPACE=AXONCACHE_",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing", 
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
            "-DXXH_NAMESPACE=AXONCACHE_",
        ],
        "//conditions:default": ["-std=c++20"],
    }),
    linkopts = select({
        "@platforms//os:macos": [
            "-framework CoreFoundation",
        ],
        "@platforms//os:linux": [
            "-lpthread",
            "-ldl", 
        ],
        "//conditions:default": [],
    }),
    deps = [
        ":xxhash_bundled",  # Only dependency is bundled xxhash
    ],
    visibility = ["//visibility:public"],
)

# CLI binary (matches CMake axoncache_cli target)
cc_binary(
    name = "axoncache_cli",
    srcs = glob([
        "main/src/*.cpp",
        "main/src/*.h",
    ]),
    includes = ["main/src"],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing", 
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
        ],
        "//conditions:default": ["-std=c++20"],
    }),
    deps = [
        ":axoncache",
        "@cxxopts//:cxxopts",
        "@spdlog//:spdlog",
        "@abseil-cpp//absl/container:flat_hash_map",
    ],
)

# ===== TEST TARGETS =====

# Main test binary (matches CMake axoncacheTest target)
cc_test(
    name = "axoncacheTest",
    srcs = [
        "test/src/main.cpp",
        "test/src/ResourceLoader.cpp",
        "test/src/ResourceLoader.h",
        "test/src/CacheTestUtils.h",
    ],
    includes = ["test/src", "test"],
    deps = [
        ":axoncache",
        "@doctest//doctest:doctest",
        "@spdlog//:spdlog",
    ],
    data = [
        "test/data/example_fast_data.dta",
        "test/data/bench_cache.1758220992251.cache",
    ],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
            "-DBAZEL_BUILD",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
            "-DBAZEL_BUILD",
        ],
        "//conditions:default": ["-std=c++20", "-DBAZEL_BUILD"],
    }),
)

# Auto-generate all other test targets
generate_test_suite(
    name = "all_tests",
    test_dirs = ["test/src"],
    exclude_files = ["test/src/main.cpp"],
)

# Convenience alias for running everything
alias(
    name = "test_all",
    actual = ":all_tests",
    visibility = ["//visibility:public"],
)