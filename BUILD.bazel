load("//bazel:test_utils.bzl", "generate_test_suite")

# Bundled xxhash C library (compiled separately)
cc_library(
    name = "xxhash_bundled",
    srcs = ["src/axoncache/common/xxhash.c"],
    hdrs = [
        "include/axoncache/common/xxhash.h",
        "include/axoncache/common/xxh3.h",
    ],
    includes = [
        "include",
        "src",
    ],
    copts = [
        "-DXXH_NAMESPACE=AXONCACHE_",
        "-w",  # Suppress warnings for bundled code
    ],
    visibility = ["//visibility:private"],
)

# Main axoncache library
cc_library(
    name = "axoncache",
    srcs = glob([
        "src/**/*.cpp",
    ]),
    hdrs = glob([
        "include/**/*.h",
        "src/**/*.h",  # Internal headers
    ]),
    includes = [
        "include",
        "src",
    ],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
            "-DXXH_NAMESPACE=AXONCACHE_",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing", 
            "-Wall",
            "-Warray-bounds",
            "-Wdate-time",
            "-Wdisabled-optimization",
            "-Wextra",
            "-Wformat=2",
            "-Wformat-security",
            "-Wimplicit-fallthrough",
            "-Winvalid-pch",
            "-Wmissing-declarations",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
            "-Wnull-dereference",
            "-Woverloaded-virtual",
            "-Wpacked",
            "-Wshadow",
            "-Wshift-overflow",
            "-Wunknown-pragmas",
            "-Wunused-parameter",
            "-Wvla",
            "-DXXH_NAMESPACE=AXONCACHE_",
        ],
        "//conditions:default": [
            "-std=c++20",
            "-DXXH_NAMESPACE=AXONCACHE_",
        ],
    }),
    linkopts = select({
        "@platforms//os:macos": [
            "-framework Security",
            "-framework CoreFoundation",
        ],
        "@platforms//os:linux": [
            "-lpthread",
            "-ldl", 
        ],
        "//conditions:default": [],
    }),
    deps = [
        ":xxhash_bundled",  # Bundled xxhash C library
        "@cpp_commons//:alcommons",  # Our Bazel-migrated Cpp-Commons
        "@spdlog//:spdlog",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
    ],
    visibility = ["//visibility:public"],
)

# CLI binary (matches CMake axoncache_cli target)
cc_binary(
    name = "axoncache_cli",
    srcs = glob([
        "main/src/*.cpp",
    ]) + glob([
        "main/src/*.h",
    ]),
    includes = ["main/src"],
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing", 
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
        ],
        "//conditions:default": ["-std=c++20"],
    }),
    deps = [
        ":axoncache",
        "@cxxopts//:cxxopts",
    ],
)

# ===== TEST TARGETS =====

# Main test binary (matches CMake axoncacheTest target) - includes ALL test sources like CMake
cc_test(
    name = "axoncacheTest",
    srcs = glob([
        "test/src/**/*.cpp",  # All test sources recursively (like CMake GLOB_RECURSE)
        "test/src/**/*.h",    # All test headers recursively
    ]),
    includes = ["test/src", "test"],
    deps = [
        ":axoncache",
        "@doctest//doctest:custom_main",
    ],
    data = glob(["test/data/*"]),  # Include all test data files
    copts = select({
        "@platforms//os:macos": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-variadic-macros",
            "-Wno-deprecated-declarations",
            "-DBAZEL_BUILD",
        ],
        "@platforms//os:linux": [
            "-std=c++20",
            "-fno-strict-aliasing",
            "-Wall",
            "-Wno-deprecated-declarations",
            "-Wno-variadic-macros",
            "-DBAZEL_BUILD",
        ],
        "//conditions:default": ["-std=c++20", "-DBAZEL_BUILD"],
    }),
)

# Auto-generate all other test targets
# Note: We use a single comprehensive test binary (like CMake) instead of individual test targets
# This allows doctest to discover all TEST_CASE macros across all test files (matches CMake's 111 tests)

# Convenience alias for running the main test
alias(
    name = "test_all", 
    actual = ":axoncacheTest",
    visibility = ["//visibility:public"],
)
